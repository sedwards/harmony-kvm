#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <bluetooth/bluetooth.h>
#include <bluetooth/hci.h>
#include <bluetooth/hci_lib.h>
#include <bluetooth/uuid.h>
#include <bluetooth/gatt.h>

void print_advertising_data(uint8_t *data, size_t size) {
    for (size_t i = 0; i < size; ) {
        uint8_t field_length = data[i];
        if (field_length == 0 || i + field_length >= size) {
            break;
        }
        printf("  Type 0x%02X: ", data[i + 1]);
        for (size_t j = 0; j < field_length - 1; j++) {
            printf("%02X ", data[i + j + 2]);
        }
        printf("\n");
        i += field_length + 1;
    }
}

int main() {
    inquiry_info *ii = NULL;
    int max_rsp = 255; // Maximum number of devices to discover
    int num_rsp;
    int dev_id, sock;

    dev_id = hci_get_route(NULL);
    sock = hci_open_dev(dev_id);

    if (dev_id < 0 || sock < 0) {
        perror("Cannot open Bluetooth socket");
        exit(1);
    }

    ii = (inquiry_info*)malloc(max_rsp * sizeof(inquiry_info));

    num_rsp = hci_inquiry(dev_id, 8, max_rsp, NULL, &ii, IREQ_CACHE_FLUSH);

    if (num_rsp < 0) {
        perror("Bluetooth inquiry failed");
        exit(1);
    }

    for (int i = 0; i < num_rsp; i++) {
        char addr[19];
        ba2str(&(ii + i)->bdaddr, addr);
        printf("Discovered device: %s\n", addr);

        // Assuming you want to connect to a specific peripheral, replace the condition with the target MAC address.
        if (strcmp(addr, "XX:XX:XX:XX:XX:XX") == 0) {
            // Establish a connection to the peripheral
            int s;
            s = hci_open_dev(dev_id);

            if (s < 0) {
                perror("Cannot open device");
                continue;
            }

            struct hci_conn_info_req req;
            bdaddr_t bdaddr;

            str2ba("XX:XX:XX:XX:XX:XX", &bdaddr); // Replace with the peripheral's MAC address

            bacpy(&req.bdaddr, &bdaddr);

            if (ioctl(s, HCIGETCONNINFO, &req) < 0) {
                close(s);
                perror("Connection error");
                continue;
            }

            // Add GATT characteristics handling
            // Replace MY_CHARACTERISTIC_UUID with the actual UUID
            char* MY_CHARACTERISTIC_UUID = "0000XXXX-0000-1000-8000-00805F9B34FB";

            int le = hci_open_dev(dev_id);
            int err = 0;
            uint16_t svc, chr, data_len;

            err = ble_connect(le, addr);
            if (err < 0) {
                printf("Error connecting to peripheral: %d\n", err);
                close(s);
                break;
            }

            // Discover services and characteristics
            err = ble_discoverservice(le, addr, 1, &svc, &data_len);
            if (err < 0) {
                printf("Error discovering services: %d\n", err);
                close(s);
                break;
            }

            err = ble_discovercharacteristic(le, addr, svc, MY_CHARACTERISTIC_UUID, &chr, &data_len);
            if (err < 0) {
                printf("Error discovering characteristics: %d\n", err);
                close(s);
                break;
            }

            // Write and Read data to the characteristic
            uint8_t value[] = "Hello";
            err = ble_writewithresponse(le, addr, chr, value, sizeof(value), &data_len);
            if (err < 0) {
                printf("Error writing data: %d\n", err);
                close(s);
                break;
            }

            // Read data
            err = ble_read(le, addr, chr, &data_len);
            if (err < 0) {
                printf("Error reading data: %d\n", err);
                close(s);
                break;
            }

            char data[data_len];
            err = ble_read(le, addr, chr, &data_len, data);
            if (err < 0) {
                printf("Error reading data: %d\n", err);
                close(s);
                break;
            }

            printf("Received: %.*s\n", data_len, data);

            close(s);
            close(le);
            break;
        }
    }

    free(ii);
    hci_close_dev(sock);

    return 0;
}

